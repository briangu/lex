# This defines byte-code query operators.
# The first word is always the name of the query. The rest are byte-code commands to be carried out.
# A query consists of a series of segments that perform specific kinds of actions.
# The potential argument words to a query are the: subject field, verb field, object field, propogate field, match field, and from factset.

# These characters are not commands:
#		_ or .  = just a separator to make things easier to read. ignored.
#		: = terminate a segment command

# The basic kinds operations the byte commands perform are:
#   1. tag some words - there can be a variety of different tags. Some say to accept. Some say to reject.
#   2. queue some words or facts to be scanned
#   3. scan facts tied to words or facts
#   4. queue some resulting facts

# Tags on words are used to:
#  1. avoid scanning from the same word more than once
#  2. detect successful words (end of the line of a search)
#  3. detect failure words (words to NOT access)

# The first segment describes what to initially tag and initially queue for processing (sources of facts)
#	Values:
#		1..9  = set global tag to this label - 0 means turn off global tag. The current global tag is used when tagging a word or fact
#		i =  use argument tag on words to ignore during a  tag or queue operation 
#			Next char is tag label. 0 means no ignoretag
#		s/v/o/p/m/~set/'word  = use a specific argument field: subject/verb/object/progogate/match/factset,named ~set,named word 
#			The above is automatically taged using the current tag and is followed by 
#				q  = queue items (sets will follow to all members recursively)
#				t  = tag(no queue) items
#				e  = expand tag(no queue) propogate down any set argument
#				< and >  = tagpropogation on nouns from base. < means propogate up (from left subject to object). > means propogate down (from right object to subject) - Warning: down propogation might be large
#					for subject/object position propogation only NOUNS are considered. for verb position only VERBS are considered.	
				1ST char after h is tag on verbs to propogate thru
#					2nd char is t or q (for tag or tag/queue)
#
#		f = use given facts in fromset as items to process -- f@n  means use this set
#			This is followed by 
#			s/v/o/f	= use corresponding field of fact or entire fact
#		the value to process will be taged AND may or may not get stored, depending on following flag being q or m

# The second segment tells how to use contents of the queue
#		s/v/o/f	= use corresponding subject/verb/object field of an item as source of facts or use fact alone directly

# third segment tells how to detect facts that match 
#set tags to compare on (test criteria for saving an answer)
#		q	= use this label to tag items added to queue
#       ! = next thing (svo) is ignore, not match
#		s/v/o	=  test corresponding subject/verb/object field of fact 
#			Next character gives label to use 0-9 for testing or the letter t means is it a topic name 
#		t = check object to see if it is a topic name (for indexing things by topic). fact store is xxx member ~topicname - make sure VERB fails (like use the propogation verbs)
#		i =	 set ignore tag (for any propogation)
#		< >	= propogate outward from queued item - < means propogate up/left-to-right    > means propogate down/right-to-left (subject)
#			This is followed by
#			1st char is verb tag to follow out
#		x	= stop on intersection (when intersect hit, path from intersect to start stored as facts in 2 factsets)
#			next values control that search
#			1st char is label to intersect
#		

# fourth segment how to take facts that dont match and migrate around the graph and save new queue entries
#	s/v/o/f	 =  which field to get facts from meaning as element of fact or use fact itself
#	S/V/O	= test riccochet field for corresponding label immediately followed by id 0-9 of test value
#   </>    =	which facts to use from that field, left facts (subject) or right facts (object)

# baddirect is unconverted query

# simple direct matches
# Eg given fact (dog love cat)
direct_s 1sq:s::	# (dog ? ?)
direct_v 1vq:v::	# (? love ?)
direct_o 1oq:o::	# (? ? cat)
direct_sv 1sq_2ve:s:v2:	# (dog love ?)
direct_vo 1oq_2ve:o:v2:	# (? love cat)
# direct_so hasn't any utility at present
direct_svo 1oq_2ve_3se:o:v2_s3:	# (dog love cat)

# up2set  ... walks upward until it intersects object set, returns fact at intersect.
# ^query(up2set _0 ? '~store_type 10 ) 
# Find the fact that leads to ~store_type (the name of the kind of store carrying the item but isnt a store type)
up2set 1sq_2'member.t_2'is.t_3ot:s:v2_o3_<2: 
# 1. tag the subject with a 1 and q it (1sq) 
# 2. tag member and is (2'member.t_2'is.t)
# 3. tag top goal object with 3
# 2a. Use the subject field of queued facts. (:s:)
# 3. take facts where queued item is subject and verb is tagged 2, test object tagged 3
#	facts that match that are instant wins.
# 4. propogate left to right on verbs with 2 tagged
# e.g.:  paper member stationer,  stationer member ~store_type


# simple one, hierarchy UP another

#1: tag member/is as 1. tag all words up from object with 2. Queue the verb tagged 3.
#2: Use verb field facts from queued words.
#3: If the object field of fact is taged with 2, we have a winner.
direct_v<o 1'is.t_1'member.t_2o<1e_3vq:v:o2:

#1: tag member/is as 1. tag all words up from subject with 2. Queue the verb tagged 3.
#2: Use verb field facts from queued words.
#3: If the subject field of fact is taged with 2, we have a winner.
direct_s<v 1'is.t_1'member.t_2s<1e_3vq:v:s2:


# similar to direct match, but resulting object field must ALSO be a member of match value
direct_sv_member 1sq_2ve_3me:s:v2_o3:  


# if ( ^query(direct %date date @ -1  @monthlist-holiday @junk ? ?)) # given a fact: ( February month Groundhog's_Day )  look at all facts on its object path like (date x specificholiday) 
# given a fact, look at its object facts and see if they match given s and v
direct_sv_factobject 1foq2se_3ve::s2v3		#  queue objects of facts in set,tag subject and verb, confirm fact matches subject and verb

# given facts, get unique set of them whose verb matches
direct_v_unique_facts 1ff2ve::v2		# queue all facts in set uniquely, no tests required


# is, member, 
# given "ant" check all subject references of it.
# if VERB doesnt matches then dont consider it  
# if object MATCHES the match, store fact
# if  VERB matches the propogate verb,  add object to the q
#

# tag(1)  and q subject. tag(2) verb. tag(3)  
# the tag will be 1 for new queued items.
# for each queued item, using it as subject field, see if verb matches 2.
# when it does, thats a match
# when it doesnt, if the verb matches label 3, queue going up (object field)


# similar to above, except object must match tag to get saved as a result
direct_unipropogate_match_s 1sq_2ve_3'member.e_4me:s:v2_o4_<3: # unipropogate walks upwards to inherit from if it needs to 


unimember 1sq_2me_3'member.e:s:o2<3:

direct_findtopics 1sq_2ve_3'member.e:s:v3_<3e: # walks up inheritance and notes topic names we are members of (fails all other facts)

direct_hierarchy 1~stopHierarchy.ei1~nosimilar.ei1_2'member.e_3o<2e_4sq::<2_x3_v1: 
# how are x and y similar. we make all normal verbs fail, we only want the intersection

direct_vo_riccochet_smatch 1oq_2ve_3pe_4me:o:v2:s_V3_S4> # eg PRESIDENTINDEX ^query1(direct_ov_riccochet_smatch ? instance ':president 1 ? ? exemplar _#0 )
	
#^query1(riccochet_ov_sv ? member $item   -1 ? ? details ? ) search for facts of member $item, for subject of those see what ones have verb details. return the objects
# take object tag and queue it. tag verb. for each fact found in object position of queue, prove verb matches.
# The found SUBJECT should have ITS facts scanned for ones with verb "details". the objects of those facts should be returned
riccochet_ov_sv 1oq_2vm_3pe:o:v2:s_V3

# take object tag and queue it. tag verb. for each fact found in object position of queue, prove verb matches.
# The found SUBJECT should have ITS facts scanned for ones with propogate verb and match object. the subjects of those facts should be returned
riccochet_ov_ov 1oq_2ve_3pe_4me:o:v2:s_V3_O4<

# used for does X Y Z and is grass green
check_truth 1~stopHierarchy.ti1_2'member.t_3o<2t_4v<2t_5sq_6'exemplar.m:s:<2_v4o3_V6:f>
# tag junk. label for ignore. take object and tag it up the hierarchy using std propogation. # take verb and tag it up hierarchy as well
#store subject on stack. go up subject hierarchy, finding verb and object that are taged. Facts are stored most general.
findtruth 1~stopHierarchy.e_i1_2'member.e_4v<2e_5sq_6'exemplar.t:s:<2_v4_V6:f>
# given facts with president names as objects, find those whose subject is the number and verb is exemplar
#  [ bird eat worm]
#  [ "birds like worms" exemplar [bird eat worm]] 
# given fact [bird eat worm] = find where that is OBJECT of a fact and verb is exemplar

findrestrictedtruth 1~stopHierarchy.m_i1_2'member.m_4v_5p.m<2m_5sq_6'exemplar.m:s:<2_v4_o5_V6:f>

direct_ovfs 1fsq_2vt:o:q1v2: # used by store 
direct_ovfo 1foq_2vt:o:q1v2: # used by store on object facts
direct_svfo 1foq_2vt:s:q1v2: # used by store - facts with object being instances, find classes of which those are subjects

